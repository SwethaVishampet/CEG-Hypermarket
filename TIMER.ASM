$MOD186
$ep
NAME TIMER
; Main program for uPD70208 microcomputer system
;
; Author: 	Dr Tay Teng Tiow
; Address:     	Department of Electrical Engineering 
;         	National University of Singapore
;		10, Kent Ridge Crescent
;		Singapore 0511.	
; Date:   	6th September 1991
;
; This file contains proprietory information and cannot be copied 
; or distributed without prior permission from the author.
; =========================================================================

public	serial_rec_action,timer2_action , timer1_action
extrn	print_char:far, print_2hex:far, iodefine:far
extrn   set_timers:far

STACK_SEG	SEGMENT
		DB	256 DUP(?)
	TOS	LABEL	WORD
STACK_SEG	ENDS


DATA_SEG	SEGMENT
	TIMER0_MESS	DB	10,13,'TIMER0 INTERRUPT    '
	TIMER1_MESS	DB	10,13,'TIMER1 INTERRUPT    '
	TIMER2_MESS	DB	10,13,'TIMER2 INTERRUPT    '
	T_COUNT		DB	2FH
	T_COUNT_SET	DB	2FH
	REC_MESS	DB	10,13,'Period of timer0 =     '
  TEST_PRINT_SERIAL DB 2 DUP(0H), 10,13
 
  KEY_DECODE 	DB 32 DUP(0)
	KEYPAD_DECODE 	DB 32 DUP('0')
  LAST_FOUND 	DB 0H ; 0 NO KEY FOUND, 1 KEY FOUND
  KEYPAD_INPUT 	DB 33 
  LED_COUNT 	DB 0H
  LED_CURRENT_DIGIT DB 01H
  LED_MAX_COUNT	 DB 06H
  LED_DISPLAY_Q 	DB 6 DUP(00H)
  LED_DECODE DB 3FH, 06H, 5BH, 4FH, 66H, 6DH, 7DH, 07H, 7FH, 6FH
  LED_DECODE_DECIMAL DB 0BFH, 86H, 0DBH, 0CFH, 0E6H, 0EDH, 0FDH, 87H, 0FFH, 0EFH
  PRICE_DIGIT DB 0D
  PRICE_RECV DB 0H
  BEFORE_DEC DB 0D
  AFTER_DEC DB 0D
  TOTAL_PRICE_BEFORE_DEC DW 0H
  TOTAL_PRICE_AFTER_DEC DW 0H
  TOTAL_PRICE DW 00D
  MULTIPLE_10 DW 1D
  POWER DW 1D
  POWER_DECIMAL DW 1D
  TRANS_START DB 0H
  TRANS_ITEM_END DB 0H
  TRANS_CHECKOUT DB 0H
  BEFORE_DEC_COUNT DB 0D
  TEMP_COUNT DB 0D
  TEMP_COUNT1 DB 0D
  TRANS_NEW DB 0H
  EMAIL_KEY DB 0H
  AUTO_KEY DB 0H
  MODIFY_KEY DB 0H
  SAVE_KEY DB 0H
  DELETE_KEY1 DB 0H
  PRICE_BEING_DISPLAYED DB 0H
  TRANS_CHANGE DB 0H
  AMOUNT DW 0D
  BACKSPACE_PRESSED DB 0H
  MODIFY_ITEM DB 0H 
  MODIFY_PRICE_AFTER_DEC DW 0H
  MODIFY_PRICE_BEFORE_DEC DW 0H
  FIX_FOR_EIGHT_BUG DB 0FH
  ;============= Sound Start
  
	SOUND_QUEUE_HEAD	DW 0
	SOUND_QUEUE_TAIL	DW 0
	SOUND_REM			DW	0
	SOUND_SIZE dw 00h
	;my_current_sound dd 00h
	
	my_sound_index	dw 0 ; specifies index ( i.e can be 0,1,2,3,4,5,6,7,8,9,10) , till sound "ten"
	
	;starting address of sounds till "ten" 
	my_sound_word_start DW	0, 4713, 8481, 11945, 15315, 18317, 21615, 26121, 30013, 31809,36107
	
	; number of words for souund till "ten"
	;count starting from 0
	my_sound_word_size dw 4713, 3768, 3464, 3371, 3002, 3297, 4506, 3893, 1796, 4298,3003
	
	CURRENT_SOUND DW 0H
	TIMER2_COUNT DB 0D ; for dividing count 250/5000 thing (to accomodate LED)
  
  ;============= Sound End
  
  ;-------------|0 , 1   , 2  , 3 ,  4 ,  5 ,  6 ,  7 ,  8 ,  9
DATA_SEG	ENDS

; 8255 register addresses
; PCS1
IC8255_PORTA_ADDR EQU 80H;
IC8255_PORTB_ADDR EQU 81H;
IC8255_PORTC_ADDR EQU 82H;
IC8255_CW_ADDR    EQU 83H;

PCS2_ADDR EQU 100H
PCS3_ADDR EQU 180H

DELETE_KEY	EQU 3 ;---------DEFINE KEY A AS DELETE KEY
ENTER_KEY 	EQU 1 ;------DEFINE KEY D AS ENTER KEY

CODE_SEG	SEGMENT


	PUBLIC		START

ASSUME	CS:CODE_SEG, SS:STACK_SEG, DS:DATA_SEG

START:
	CLI
;initialize stack area
		MOV	AX,STACK_SEG		
		MOV	SS,AX
		MOV	SP,TOS

		MOV AX, DATA_SEG
		MOV DS, AX
	
; Initialize the on-chip pheripherals
		CALL	FAR PTR	IODEFINE
	
	MOV DX, IC8255_CW_ADDR
	MOV AL, 82H  ;PORTC LOWER OUTPUT - PORTB INPUT
	OUT DX, AL
  
	; MOV DX, IC8255_PORTA_ADDR
	; MOV AL, 0FFH
	; OUT DX, AL
	
	;Initialisation for Sound 
	MMCS 	EQU 	0FFA6H
	MPCS 	EQU 	0FFA8H
	MOV 	DX, MPCS 	
	MOV 	AX, 2083H	
	OUT 	DX, AX

	MOV 	DX, MMCS	; send MCS start address to 40000
	MOV 	AX, 4003H			
	OUT 	DX, AX
	
	MOV DX, 0FFA4H		;PACS
	MOV AX, 0003H
	OUT DX, AL

; Initialize key code
	MOV DS:KEYPAD_DECODE[1], 'e'
	MOV DS:KEYPAD_DECODE[2], '0'
	MOV DS:KEYPAD_DECODE[3], 'd'
	MOV DS:KEYPAD_DECODE[4], '9'
	MOV DS:KEYPAD_DECODE[5], '8'
	MOV DS:KEYPAD_DECODE[6], '7'
	MOV DS:KEYPAD_DECODE[7], '6'
	MOV DS:KEYPAD_DECODE[8], '5'
	MOV DS:KEYPAD_DECODE[9], '4'
	MOV DS:KEYPAD_DECODE[10], '3'
	MOV DS:KEYPAD_DECODE[11], '2'               
	MOV DS:KEYPAD_DECODE[12], '1'
	MOV DS:KEYPAD_DECODE[13], 'c'
	MOV DS:KEYPAD_DECODE[14], '#'
	MOV DS:KEYPAD_DECODE[15], '*'
	MOV DS:KEYPAD_DECODE[16], 'a'
	MOV DS:KEYPAD_DECODE[17], 'm'
	MOV DS:KEYPAD_DECODE[18], 'p'
	MOV DS:KEYPAD_DECODE[19], 's'
	MOV DS:KEYPAD_DECODE[20], 'h'
	MOV DS:KEYPAD_DECODE[21], 'n'
	MOV DS:KEYPAD_DECODE[22], 'z'
	MOV DS:KEYPAD_DECODE[23], 'o'
	MOV DS:KEYPAD_DECODE[24], 'f'

	MOV DS:KEY_DECODE[1], 0DH
	MOV DS:KEY_DECODE[2], 0
	MOV DS:KEY_DECODE[3], 0AH 
	MOV DS:KEY_DECODE[4], 9
	MOV DS:KEY_DECODE[5], 8
	MOV DS:KEY_DECODE[6], 7
	MOV DS:KEY_DECODE[7], 6
	MOV DS:KEY_DECODE[8], 5
	MOV DS:KEY_DECODE[9], 4
	MOV DS:KEY_DECODE[10],3
	MOV DS:KEY_DECODE[11],2
	MOV DS:KEY_DECODE[12],1
	MOV DS:TRANS_CHECKOUT ,'c'
	MOV DS:TRANS_ITEM_END,'e'

; ^^^^^^^^^^^^^^^^^  Start of User Main Routine  ^^^^^^^^^^^^^^^^^^


	call set_timers
                 STI
NEXT:     
; ====================================================================================================================================================

	
ENTER_BARCODE:
	MOV DS:LED_COUNT, 00H
	MOV DS:LED_MAX_COUNT, 08H ;CHANGED
ENTER_BARCODE_LOOP:
		;CALL FAR PTR FETCH_DIGIT
		
		;CHECK IF BARCODE IS 6 DIGIT
		MOV AL, DS:LED_COUNT
		CMP DS:LED_MAX_COUNT, AL
		JNE END_ONE_BARCODE_LOOP;---NOT FULL
		CMP DS:KEYPAD_INPUT, ENTER_KEY
		JNE NOT_ENTER_BARCODE
		MOV DS:KEYPAD_INPUT, 33
		JMP ENTER_QUANTITY
		NOT_ENTER_BARCODE:
		
	END_ONE_BARCODE_LOOP:
	JMP ENTER_BARCODE_LOOP
	;SEND BARCODE TO PC THROUGH SERIAL PORT^^^^^^^^^^^^^^^^^^^^^^^^^^^^
		;VOICE OUT BARCODE	
;====================================================================================================================================================
ENTER_QUANTITY:
	MOV DS:LED_COUNT, 00H
	MOV DS:LED_MAX_COUNT, 03H
ENTER_QUANTITY_LOOP:
		;CALL FAR PTR FETCH_DIGIT
		
		CMP DS:KEYPAD_INPUT, ENTER_KEY
		JNE NOT_ENTER_QUANTITY
		MOV DS:KEYPAD_INPUT, 33
		JMP OUTSIDE
		NOT_ENTER_QUANTITY:
		
	END_ONE_QUANTITY_LOOP:
	JMP ENTER_QUANTITY_LOOP

	JMP END_JMP
	
;SEND QUANTITY TO PORT
;VOICE OUT
;====================================================================================================================================================
OUTSIDE: 
;CLEARING LED AFTER ONE 
MOV DS:LED_COUNT, 00H
MOV DS:LED_MAX_COUNT, 06H
	MOV DX, PCS2_ADDR
	;MOV AL, 11111111B
	MOV AL, 00000000B
	OUT DX, AL
	
	MOV DX, PCS3_ADDR
	MOV AL, 01000000B
	;MOV AL, 11111111B
	OUT DX, AL
COMPUTE_SUBTOTAL:

END_JMP:
	
JMP NEXT

; ^^^^^^^^^^^^^^^ End of User main routine ^^^^^^^^^^^^^^^^^^^^^^^^^

REMOVE_LAST_LED PROC FAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	MOV AL, 0H
	CMP DS:LED_COUNT, AL
	JE LED_Q_EMPTY_REMOVE_LED
	
	MOV AL, DS:LED_COUNT
	DEC AL
	MOV DS:LED_COUNT, AL
	
	
	MOV AL, DS:LED_DISPLAY_Q[1]
	MOV DS:LED_DISPLAY_Q[0], AL
	MOV AL, DS:LED_DISPLAY_Q[2]
	MOV DS:LED_DISPLAY_Q[1], AL
	MOV AL, DS:LED_DISPLAY_Q[3]
	MOV DS:LED_DISPLAY_Q[2], AL
	MOV AL, DS:LED_DISPLAY_Q[4]
	MOV DS:LED_DISPLAY_Q[3], AL
	MOV AL, DS:LED_DISPLAY_Q[5]
	MOV DS:LED_DISPLAY_Q[4], AL
	MOV DS:LED_DISPLAY_Q[5], 0H
	
	
	
	LED_Q_EMPTY_REMOVE_LED:
	POP DX
	POP CX
	POP BX
	POP AX
	RET
REMOVE_LAST_LED ENDP


FETCH_DIGIT PROC FAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
		
		
		; MOV AL, DS:FIX_FOR_EIGHT_BUG
		; MOV DS:KEYPAD_INPUT, AL
		
		; CMP DS:KEYPAD_INPUT, 0FH
		; JNE CONTINUE_KEYPAD_INPUT
		; JMP END_ONE_LOOP
		; CONTINUE_KEYPAD_INPUT:
		CMP DS:KEYPAD_INPUT, 0
		JE NUMBER
		CMP DS:KEYPAD_INPUT, 2
		JE NUMBER
		CMP DS:KEYPAD_INPUT, 4
		JE NUMBER
		CMP DS:KEYPAD_INPUT, 5
		JE NUMBER
		CMP DS:KEYPAD_INPUT, 6
		JE NUMBER
		CMP DS:KEYPAD_INPUT, 7
		JE NUMBER
		CMP DS:KEYPAD_INPUT, 8
		JE NUMBER
		CMP DS:KEYPAD_INPUT, 9
		JE NUMBER
		CMP DS:KEYPAD_INPUT, 10
		JE NUMBER
		CMP DS:KEYPAD_INPUT, 11
		JE NUMBER
		CMP DS:KEYPAD_INPUT, 12
		JE NUMBER
		
		JMP NOT_NUMBER
		RESET_LED_FOR_PRICE:
		MOV DS:PRICE_BEING_DISPLAYED, 00H
		MOV DS:LED_COUNT, 00H
		MOV DS:LED_MAX_COUNT, 08H
		MOV DX, PCS2_ADDR
		;MOV AL, 11111111B
		MOV AL, 00000000B
		OUT DX, AL
		
		MOV DX, PCS3_ADDR
		MOV AL, 01000000B
		;MOV AL, 11111111B
		OUT DX, AL
		MOV DS:AFTER_DEC,0D
		JMP BACK_FROM_RESET_LED_FOR_PRICE
		
		
	NUMBER:	
		CMP DS:PRICE_BEING_DISPLAYED, 01H
		JE RESET_LED_FOR_PRICE
		BACK_FROM_RESET_LED_FOR_PRICE:
		CALL FAR PTR PUSH_TO_LED_Q
		
		XOR BH,BH
		MOV BL,DS:KEYPAD_INPUT
		XOR CH,CH
		MOV CL,DS:KEY_DECODE[BX]
		MOV DS:CURRENT_SOUND,CX
		CALL FAR PTR PUT_ONE_SOUND
	
		CMP DS:TRANS_CHANGE,01H
		JE CHANGE_ISSUE
		COME_BACK:
		MOV DS:KEYPAD_INPUT, 33 ;--------CLEAR KEYPAD INPUT
		JMP END_ONE_LOOP
	
	
	NOT_NUMBER:
		CMP DS:BACKSPACE_PRESSED, 1H
		JNE BACKSPACE_NOT_PRESSED
		MOV DS:BACKSPACE_PRESSED, 0H
		CALL FAR PTR REMOVE_LAST_LED
		BACKSPACE_NOT_PRESSED:
		CMP DS:TRANS_CHECKOUT,1H
		JE DO_STUFF
		;JMP END_TIME
		JMP CHECK_CLEAR
		CHANGE_ISSUE:
		XOR AX,AX
		XOR CX,CX
		XOR DX,DX
		MOV DX,10D
		MOV AX,DS:AMOUNT
		XOR BH,BH
		MOV BL,DS:KEYPAD_INPUT
		XOR CH,CH
		MOV CL,DS:KEY_DECODE[BX]
		MUL DX
		ADD CX,AX
		MOV DS:AMOUNT, 0000
		MOV DS:AMOUNT,CX
		JMP COME_BACK
		DO_STUFF:
		
		;MOV CX,10D
		;LOOP_POP1:
		CALL FAR PTR POP_FROM_LED_Q_AISH
		;LOOP LOOP_POP1
		MOV DS:TRANS_CHECKOUT,0H
			MOV DS:LED_COUNT, 00H
		MOV DS:LED_MAX_COUNT, 08H
		MOV DX, PCS2_ADDR
		;MOV AL, 11111111B
		MOV AL, 00000000B
		OUT DX, AL
		
		MOV DX, PCS3_ADDR
		MOV AL, 01000000B
		;MOV AL, 11111111B
		OUT DX, AL
			
			;MOV DS:TRANS_CHANGE,0H
			MOV DS:TOTAL_PRICE_BEFORE_DEC,1561
			CMP TRANS_CHANGE,01H
			JE SUBTRACT
			JMP NON_SUBTRACT
			SUBTRACT:
			XOR CX,CX
			XOR AX,AX
			MOV CX,DS:AMOUNT
			MOV AX,DS:TOTAL_PRICE
			SUB CX,AX
			;AND CX,0FH
			XOR AX, AX
			MOV AX, 0
			MOV DS:TOTAL_PRICE_BEFORE_DEC, AX
			;MOV DS:TOTAL_PRICE_BEFORE_DEC,0000H
			;CALL FAR PTR POP_FROM_LED_Q_AISH
			MOV DS:TOTAL_PRICE_BEFORE_DEC,CX
			XOR CX,CX
			
			NON_SUBTRACT:
			mov dx,0 ; clear dividend, high
			XOR AX,AX
			;MOV DS:TOTAL_PRICE_BEFORE_DEC,141
			;MOV DS:TOTAL_PRICE_AFTER_DEC,245
			;MODIFY
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			SUB AX,DS:MODIFY_PRICE_BEFORE_DEC
			MOV DS:TOTAL_PRICE_BEFORE_DEC,AX
			
			XOR AX,AX
			MOV AX,DS:TOTAL_PRICE_AFTER_DEC
			SUB AX,DS:MODIFY_PRICE_AFTER_DEC
			MOV DS:TOTAL_PRICE_AFTER_DEC,AX
			XOR AX,AX
			;MODIFY
			MOV AX,DS:TOTAL_PRICE_AFTER_DEC
			;mov ax,800h ; dividend, low
			mov cx,100 ; divisor
			div cx
			XOR AH,AH
			ADD DS:TOTAL_PRICE_BEFORE_DEC,AX
			MOV DS:TOTAL_PRICE_AFTER_DEC,DX
			XOR AX,AX
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			MOV DS:TOTAL_PRICE,AX
			
			MOV DS:LED_COUNT,0
			
			CMP DS:TOTAL_PRICE_BEFORE_DEC,10000
			JGE GREATER_10000
			CMP DS:TOTAL_PRICE_BEFORE_DEC,1000
			JGE GREATER_1000
			CMP DS:TOTAL_PRICE_BEFORE_DEC,100
			JGE GREATER_100
			CMP DS:TOTAL_PRICE_BEFORE_DEC,10
			JGE GREATER_10
			CMP DS:TOTAL_PRICE_BEFORE_DEC,10
			JL LESS_10
			
			GREATER_10000:
			MOV DS:BEFORE_DEC_COUNT,5D
			JMP END_TIME_DISP_ABOVE_4
			GREATER_1000:
			MOV DS:BEFORE_DEC_COUNT,4D
			JMP END_TIME_DISP_ABOVE_3
			GREATER_100:
			MOV DS:BEFORE_DEC_COUNT,3D
			JMP END_TIME_DISP_BELOW_3
			GREATER_10:
			MOV DS:BEFORE_DEC_COUNT,2D
			JMP END_TIME_DISP_BELOW_3
			LESS_10:
			MOV DS:BEFORE_DEC_COUNT,1D
			JMP END_TIME_DISP_BELOW_3
			
			END_TIME_DISP_ABOVE_4:
			XOR DX,DX
			MOV DS:MULTIPLE_10,10000
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			MOV CX,DS:MULTIPLE_10
			DIV CX
			MOV DS:PRICE_DIGIT,AL		
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			MOV DS:TOTAL_PRICE_BEFORE_DEC,DX

			XOR DX,DX 
			XOR AX,AX
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			MOV CX,1000
			DIV CX
			MOV DS:PRICE_DIGIT,AL		
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			MOV DS:TOTAL_PRICE_BEFORE_DEC,DX
			
			
			XOR DX,DX 
			XOR AX,AX
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			MOV CX,100
			DIV CX
			MOV DS:PRICE_DIGIT,AL		
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			MOV DS:TOTAL_PRICE_BEFORE_DEC,DX
			
			XOR DX,DX 
			XOR AX,AX
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			MOV CX,10
			DIV CX
			MOV DS:PRICE_DIGIT,AL		
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			MOV DS:TOTAL_PRICE_BEFORE_DEC,DX
			
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			MOV DS:PRICE_DIGIT,AL
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			JMP END_MUL
			
			END_TIME_DISP_ABOVE_3:
			XOR DX,DX
			;MOV DS:MULTIPLE_10,1000
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			;MOV CX,DS:MULTIPLE_10
			MOV CX,1000
			DIV CX
			MOV DS:PRICE_DIGIT,AL		
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			MOV DS:TOTAL_PRICE_BEFORE_DEC,DX

			XOR DX,DX 
			XOR AX,AX
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			MOV CX,100
			DIV CX
			MOV DS:PRICE_DIGIT,AL		
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			MOV DS:TOTAL_PRICE_BEFORE_DEC,DX
			
			
			XOR DX,DX 
			XOR AX,AX
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			MOV CX,10
			DIV CX
			MOV DS:PRICE_DIGIT,AL		
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			MOV DS:TOTAL_PRICE_BEFORE_DEC,DX
			
			; MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			; MOV DS:PRICE_DIGIT,AL
			; CALL FAR PTR PUSH_TO_LED_Q_PRICE
			 JMP END_MUL
			
			END_TIME_DISP_BELOW_3:
			MOV AL,DS:BEFORE_DEC_COUNT
			MOV DS:TEMP_COUNT,AL
			LOOP_DISPLAY_LED:
				MOV DS:MULTIPLE_10,1
				MOV AL,DS:TEMP_COUNT
				XOR AH,AH
				DEC AX
				CMP AL,0
				JLE END_MUL
				MOV CX,AX
		
		XOR AX,AX
				LOOP_DIGIT3:
				XOR AH,AH
				MOV AL,10
				MUL DS:MULTIPLE_10
				MOV DS:MULTIPLE_10,AX
				LOOP LOOP_DIGIT3
			
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			MOV CX,DS:MULTIPLE_10
			DIV CX
			MOV DS:PRICE_DIGIT,AL
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			MOV DS:TOTAL_PRICE_BEFORE_DEC,DX
			DEC DS:TEMP_COUNT
			JMP LOOP_DISPLAY_LED
			END_MUL:
			MOV DS:AFTER_DEC,3
			XOR AH,AH
			MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
			MOV DS:PRICE_DIGIT,AL
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			
			XOR DX,DX 
			XOR AX,AX
			MOV AX,DS:TOTAL_PRICE_AFTER_DEC
			MOV CX,10
			DIV CX
			MOV DS:PRICE_DIGIT,AL		
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			MOV DS:TOTAL_PRICE_AFTER_DEC,DX
			
			MOV AX,DS:TOTAL_PRICE_AFTER_DEC
			MOV DS:PRICE_DIGIT,AL 
			CALL FAR PTR PUSH_TO_LED_Q_PRICE
			JMP END_TIME
			
		CMP DS:KEYPAD_INPUT, DELETE_KEY
		JNE NOT_DELETE
		CALL FAR PTR POP_FROM_LED_Q 
		MOV DS:KEYPAD_INPUT, 33
		NOT_DELETE:
		JMP END_TIME
		
		CHECK_CLEAR:
		CMP DS:TRANS_NEW,1H
		JE CLEAR_STUFF
		JMP END_TIME_2	
			CLEAR_STUFF:
				MOV DS:PRICE_DIGIT,0D
				MOV DS:PRICE_RECV,0H
				MOV DS:TRANS_NEW,0H
				MOV DS:MODIFY_ITEM,0H
				MOV DS:TOTAL_PRICE_AFTER_DEC,0H
				MOV DS:TOTAL_PRICE_BEFORE_DEC,0H
				MOV DS:MODIFY_PRICE_AFTER_DEC,0H
				MOV DS:MODIFY_PRICE_BEFORE_DEC,0H
				MOV DS:TOTAL_PRICE,0D
				MOV DS:BEFORE_DEC,0D
				MOV DS:AFTER_DEC,0D
				MOV DS:MULTIPLE_10,1D
				MOV DS:LED_COUNT,0D
				MOV DS:LED_MAX_COUNT,08H
				MOV DS:POWER,1D
				MOV DS:POWER_DECIMAL,1D
				MOV DS:TRANS_CHANGE,0H
				MOV DS:AMOUNT,0H
				MOV CX,10D
				LOOP_POP:
				CALL FAR PTR POP_FROM_LED_Q
				LOOP LOOP_POP
				MOV DX, PCS2_ADDR
				MOV AL, 00000000B
				OUT DX, AL
				
				MOV DX, PCS3_ADDR
				MOV AL, 01000000B
				OUT DX, AL
				JMP END_TIME
		END_TIME_2:

		END_TIME:
	END_ONE_LOOP:

	POP DX
	POP CX
	POP BX
	POP AX
	RET
FETCH_DIGIT ENDP

	
;------------------------------------------------------------------------------	
SERIAL_REC_ACTION	PROC	FAR
		PUSH	CX
		PUSH 	BX
		PUSH	DS

		MOV	BX,DATA_SEG		;initialize data segment register
		MOV	DS,BX

		; CMP AL, 'F'
		; JE FIND_ITEM_SERIAL_RECV
		
		; CMP DS:FIND_ITEM_VALUE, 01H
		; JE SET_FIND_ITEM_VALUE
		CMP AL,'m'
		JE MODIFY_ITEM1
		
		CMP AL, '$'
		JE SET_PRICE_RECV
	
		CMP DS:PRICE_RECV, 04H
		JE INTERMEDIATE_JUMP
		CMP AL, '<'
		JE SET_END
		
		CMP DS:PRICE_RECV, 01H
		JE SET_BEFORE_DEC
		
		CMP DS:PRICE_RECV, 02H
		JE SET_AFTER_DEC
		
		
		
		CMP DS:PRICE_RECV, 03H
		JE DISPLAY_PRICE_DIGIT
		
		
		INTERMEDIATE_JUMP:
		JMP S_RET
		
		SET_END:
		MOV DS:PRICE_RECV, 04H
		MOV DS:PRICE_BEING_DISPLAYED, 01H
		MOV DS:MODIFY_ITEM,0H
		JMP S_RET
		
		; SET_FIND_ITEM_VALUE:
		; MOV DS:FIND_ITEM_VALUE, 00H
		; MOV DS:FIND_ITEM_NUMBER, AL
		
		; CALL FAR PTR FIND_ITEM_RESULT
		
		JMP S_RET
		SET_PRICE_RECV:		
		MOV AL, 01H
		MOV DS:PRICE_RECV, AL
		
		JMP S_RET
		
		MODIFY_ITEM1:
		MOV DS:MODIFY_ITEM,01H
		JMP S_RET
		;FIND_ITEM_SERIAL_RECV:
		;MOV DS:FIND_ITEM_VALUE, 01H
		;JMP S_RET
		SET_BEFORE_DEC:
		MOV DS:BEFORE_DEC, AL
		XOR AH,AH
		CMP AL,'1'
		JE SET_1
		CMP AL,'2'
		JE SET_2
		CMP AL,'3'
		JE SET_3
		CMP AL,'4'
		JE SET_4
		SET_1:
		MOV AL,1D
		JMP SET_BEFORE
		SET_2:
		MOV AL,2D
		JMP SET_BEFORE
		SET_3:
		MOV AL,3D
		JMP SET_BEFORE
		SET_4:
		MOV AL,4D
		JMP SET_BEFORE
		SET_BEFORE:
		MOV DS:POWER,AX
		MOV AL, 02H
		MOV DS:PRICE_RECV, AL
		JMP S_RET
		
		SET_AFTER_DEC:
		MOV DS:AFTER_DEC, 3D
		XOR AH,AH
		MOV DS:POWER_DECIMAL,2D
		MOV AL, 03H
		MOV DS:PRICE_RECV, AL
		JMP S_RET
		
		
		
		DISPLAY_PRICE_DIGIT:
		
		;START
		CMP AL, '0'
		JE AL_IS_ZERO
		CMP AL, '1'
		JE AL_IS_ONE
		CMP AL, '2'
		JE AL_IS_TWO
		CMP AL, '3'
		JE AL_IS_THREE
		CMP AL, '4'
		JE AL_IS_FOUR
		CMP AL, '5'
		JE AL_IS_FIVE
		CMP AL, '6'
		JE AL_IS_SIX
		CMP AL, '7'
		JE AL_IS_SEVEN
		CMP AL, '8'
		JE AL_IS_EIGHT
		CMP AL, '9'
		JE AL_IS_NINE
		;END
		
		AL_IS_ZERO:
		MOV AL,00D
		JMP MOV_AL_INTO_PRICE
		
		AL_IS_ONE:
		MOV AL,01D
		JMP MOV_AL_INTO_PRICE
		
		AL_IS_TWO:
		MOV AL,02D
		JMP MOV_AL_INTO_PRICE
		
		AL_IS_THREE:
		MOV AL,03D
		JMP MOV_AL_INTO_PRICE
		
		AL_IS_FOUR:
		MOV AL,04D
		JMP MOV_AL_INTO_PRICE
		
		AL_IS_FIVE:
		MOV AL,05D
		JMP MOV_AL_INTO_PRICE
		
		AL_IS_SIX:
		MOV AL,06D
		JMP MOV_AL_INTO_PRICE
		
		AL_IS_SEVEN:
		MOV AL,07D
		JMP MOV_AL_INTO_PRICE
		
		AL_IS_EIGHT:
		MOV AL,08D
		JMP MOV_AL_INTO_PRICE
		
		AL_IS_NINE:
		MOV AL,09D
		JMP MOV_AL_INTO_PRICE
		
		
		MOV_AL_INTO_PRICE:
		
		MOV DS:PRICE_DIGIT, AL
		CALL FAR PTR PUSH_TO_LED_Q_PRICE
		
		
		CMP DS:POWER,0H
		JLE PRINT_LED_POWER
		XOR AX,AX
		MOV AX,DS:POWER
		DEC AX
		CMP AX,0
		JE PUT_OF_LOOP
		MOV CX,AX
		;CALL FAR PTR PRINT_2HEX
		xor ax,ax
		LOOP_DIGIT:
		XOR AH,AH
		MOV AL,10D
		MUL DS:MULTIPLE_10
		MOV DS:MULTIPLE_10,AX
		LOOP LOOP_DIGIT
		PUT_OF_LOOP:
		MOV AL,DS:PRICE_DIGIT
		MUL DS:MULTIPLE_10
		XOR AH,AH
		ADD DS:TOTAL_PRICE_BEFORE_DEC,AX
		DEC POWER
		MOV DS:MULTIPLE_10,1D
		JMP LED
		PRINT_LED_POWER:
		CMP DS:MODIFY_ITEM,01H
		JE PRICE_ASSIGN
		JMP NORMAL_PRICE
		PRICE_ASSIGN:
		XOR AX,AX
		MOV AX,DS:TOTAL_PRICE_BEFORE_DEC
		MOV DS:MODIFY_PRICE_BEFORE_DEC,AX
		NORMAL_PRICE:
		CMP DS:POWER_DECIMAL,0D
		JLE LED
		JMP DECIMAL_CALCULATE
		LED:
		CMP DS:MODIFY_ITEM,01H
		JE PRICE_ASSIGN1
		JMP NORMAL_PRICE1
		PRICE_ASSIGN1:
		XOR AX,AX
		MOV AX,DS:TOTAL_PRICE_AFTER_DEC
		MOV DS:MODIFY_PRICE_AFTER_DEC,AX
		NORMAL_PRICE1:
	
S_RET:
		POP	DS
		POP	BX
		POP	CX
		RET
		
		 DECIMAL_CALCULATE:
		 XOR AX,AX
		 ;MOV AX,DS:POWER_DECIMAL
		 MOV AX,2
		 DEC AX
		 CMP AX,0
		 JE PUT_OF_LOOP1
		 MOV CX,AX
		
		 LOOP_DIGIT1:
		 XOR AH,AH
		 MOV AL,10D
		 MUL DS:MULTIPLE_10
		 MOV DS:MULTIPLE_10,AX
		 LOOP LOOP_DIGIT1
		 PUT_OF_LOOP1:
		 MOV AL,DS:PRICE_DIGIT
		 CMP DS:POWER_DECIMAL,1
		 JE SET_ZERO
		 JMP NORMAL
		 SET_ZERO:
		 MOV AL,0
		 NORMAL:
		 MUL DS:MULTIPLE_10
		 XOR AH,AH
		 ADD DS:TOTAL_PRICE_AFTER_DEC,AX
		 DEC POWER_DECIMAL
		 MOV DS:MULTIPLE_10,1D
		 JMP LED
		
SERIAL_REC_ACTION	ENDP

;TIMER0_ACTION	PROC	FAR
;		PUSH	AX
;		PUSH	DS
;		PUSH	BX
;		PUSH	CX



	
;		POP	CX
;		POP	BX
;		POP	DS
;		POP 	AX
;		RET
;TIMER0_ACTION	ENDP


DISPLAY_PRICE_ON_LED PROC FAR
PUSH AX
PUSH BX
PUSH CX
PUSH DX

;MOV DS:LED_DISPLAY_Q, DS:REC_MESS


XOR BX, BX

MOV AL, 0H ; used to indicate decimal point is received
MOV SI, 0H 
NEXT_DIGIT:
; mov to ds:price_digit and call push
MOV BH, DS:REC_MESS[SI]
SUB BH, 48D
MOV DS:PRICE_DIGIT, BH
;CALL FAR PTR PUSH_TO_LED_Q_PRICE
INC SI
CMP SI, 06H
JLE NEXT_DIGIT



POP DX
POP CX
POP BX
POP AX

RET
DISPLAY_PRICE_ON_LED ENDP


TIMER1_ACTION	PROC	FAR
		PUSH	AX
		PUSH	DS
		PUSH	BX
		PUSH	CX

		MOV	AX,DATA_SEG
		MOV	DS,AX

		
	
		INC DS:TIMER2_COUNT
		
		XOR DL, DL
		MOV DL, DS:TIMER2_COUNT
		
		CMP DL, 5D
		JNE SHOW_LED_TIMER1
		CALL FAR PTR KEYPAD_ROUTINE
		MOV DS:TIMER2_COUNT, 0D
		
		;JMP T1_NEXT 	; This is removed so, now LED is called every time interrupt is called. If this is not commented, then LED is called only 4 times in 5 which
						; leads to some flicker

		SHOW_LED_TIMER1:
		CALL FAR PTR LED_ROUTINE
T1_NEXT:	
		POP	CX
		POP	BX
		POP	DS
		POP AX
		RET
TIMER1_ACTION	ENDP

TIMER2_ACTION	PROC	FAR
		PUSH	AX
		PUSH	DS
		PUSH	BX
		PUSH	CX
		PUSH    DX
		
		XOR AX,AX
		XOR CX,CX
		
		MOV	AX,DATA_SEG
		MOV	DS,AX
	
		MOV AX, DS:SOUND_QUEUE_HEAD
		MOV CX, DS:SOUND_QUEUE_TAIL
		CMP AX, CX
		JE T2_NEXT
		
		
		XOR AX, AX
		xor bx,bx
		mov ax, 4000h
		mov es, ax
		mov di, DS:SOUND_QUEUE_HEAD
			
		mov al, es:[di]
		
		mov dx, 0200h
		out dx,al

		inc DS:SOUND_QUEUE_HEAD	
		
T2_NEXT:	
		POP DX
		POP	CX
		POP	BX
		POP	DS
		POP AX
		RET
		
		RESET_SOUND:
			mov ds:SOUND_QUEUE_HEAD ,0
			MOV DS:SOUND_QUEUE_TAIL , 0
			MOV SOUND_SIZE ,0
			JMP T2_NEXT
TIMER2_ACTION	ENDP



DEBOUNCE	PROC	NEAR
			PUSH	CX
			MOV CX, 02380D ; 2380 dec
BACK:		NOP	  ; 3 clocks
			LOOP BACK; 18 clocks

			POP CX
			RET
DEBOUNCE	ENDP





;-------------------------------------------------------------
KEYPAD_ROUTINE PROC FAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	MOV BL, 01H	;initialize BL for key code

	XOR AX, AX	;clear al flags
	MOV DX,IC8255_PORTC_ADDR  
	OUT DX, AX	;ground all rows
	MOV DX, IC8255_PORTB_ADDR


CHECK_KEY_CLOSED:	

	
	IN AL, DX	
	AND AL, 07H	;Mask data lines D7-D3
	CMP AL, 07H ;any key pressed?
	JE NOT_FOUND_KEY
	
	CALL DEBOUNCE ; DEBOUNCE
	MOV AL, 07FH	
	MOV BH, 08H	;row counter
NEXT_ROW:	
	ROL AL, 01H ;
	MOV CH, AL	;save 
	MOV DX, IC8255_PORTC_ADDR
	OUT DX, AL	;grounding one row
	
	;CALL SLIGHT_DELAY ; DELAY
	
	MOV DX, IC8255_PORTB_ADDR
	IN AL, DX	
	AND AL, 07H	;Mask D3-D7
	MOV CL, 03H	;column counter
NEXT_COLUMN1:	

	RCR AL, 01H ;move D0 to CF
	JNC KEY_DETECTED	
	INC BL	 
	DEC CL	 
	JNZ NEXT_COLUMN1	
	
	MOV AL, CH	;Load 
	DEC BH	 
	JNZ NEXT_ROW	
	
	JMP NOT_FOUND_KEY
KEY_DETECTED:	
	CMP DS:LAST_FOUND, 1
	JE END_KEYPAD_ROUTINE
	MOV DS:LAST_FOUND, 1
	MOV DS:KEYPAD_INPUT, BL ;---------STORE INPUT TO THIS VARIABLE
	XOR BH, BH
	MOV AL, DS:KEYPAD_DECODE[BX]	;key code 
	;JMP AISH1
	;BACK_AISH1:
	CALL FAR PTR FETCH_DIGIT
	;MOV DS:FIX_FOR_EIGHT_BUG, BL
	CALL FAR PTR PRINT_CHAR
	;MOV DS:CURRENT_SOUND,AX
	;CALL FAR PTR PUT_ONE_SOUND
	;JMP END_ROUTINE_1
	;AISH1:
	CMP BX, 3
	JE SET_BACKSPACE
	
	CMP BX,13
	JE SET_CHECK
	;JMP END_KEYPAD_ROUTINE

	CMP BX,15
	JE SET_CLEAR
	
	CMP BX,22
	JE SET_CHANGE
	JMP END_KEYPAD_ROUTINE1
	
	
	
	NOT_FOUND_KEY:
	MOV DS:LAST_FOUND, 0
	 JMP END_KEYPAD_ROUTINE1
	 
	SET_BACKSPACE:
		MOV DS:BACKSPACE_PRESSED, 1H
		CALL FAR PTR FETCH_DIGIT
		JMP END_KEYPAD_ROUTINE1
	 SET_CHECK:
		MOV DS:TRANS_CHECKOUT,1H
		CALL FAR PTR FETCH_DIGIT
		JMP END_KEYPAD_ROUTINE1
	SET_CLEAR:	
		MOV DS:TRANS_NEW,1H
		CALL FAR PTR FETCH_DIGIT
		JMP END_KEYPAD_ROUTINE1
	SET_CHANGE:
		MOV DS:TRANS_CHANGE,1H	
		CALL FAR PTR FETCH_DIGIT
		JMP END_KEYPAD_ROUTINE1
	END_KEYPAD_ROUTINE1:
	;JMP BACK_AISH1
	END_ROUTINE_1:
	END_KEYPAD_ROUTINE:
	POP DX
	POP CX
	POP BX
	POP AX
	RET
KEYPAD_ROUTINE ENDP
;---------------------------------------------------
;---------------------------------------------------
LED_ROUTINE PROC FAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	CMP DS:LED_COUNT, 0H
	JE NO_DIGIT_TO_DISPLAY
	
;SELECT DIGIT
	MOV CH, 11111101B ; FIRST DIGIT
	
	MOV CL, DS:LED_CURRENT_DIGIT
	;MOV DS:LED_MAX_COUNT, 06H
NEXT_LED:	
	ROL CH, CL
	MOV DX, PCS2_ADDR
	MOV AL, CH
	;MOV AL, 00000000B
	OUT DX, AL
	
	;DISPLAY VALUE
	MOV BL, CL
	XOR BH, BH
	DEC BL
	MOV DL, DS:LED_DISPLAY_Q[BX]
	;MOV AL, DL
	;CALL FAR PTR PRINT_2HEX
	MOV BL, DL
	MOV AL, DS:LED_DECODE[BX]
	
	; MOV DL, DS:AFTER_DEC
	; CMP DL, CL
	; JGE SHOW_DECIMAL
	; JMP SHOW_VALUE
	
	
	; SHOW_DECIMAL:
	; MOV AL, 0H
	
	; SHOW_VALUE:
	
	 MOV DL,DS:AFTER_DEC
	 CMP DS:LED_CURRENT_DIGIT, DL
	 ;CMP CH, 11110111B
	 JE DECIMAL_DISPLAY 
	 JMP NORMAL_DISPLAY
	 DECIMAL_DISPLAY:
	 OR AL,10000000B
	NORMAL_DISPLAY:
	XOR DX, DX
	MOV DX, PCS3_ADDR
	OUT DX, AL

	;DEC DS:LED_MAX_COUNT
	;JNZ NEXT_LED

	DEC CL
	JNZ LED_CONTINUTE
	MOV CL, DS:LED_COUNT
LED_CONTINUTE:
	MOV DS:LED_CURRENT_DIGIT, CL
	JMP END_LED_ROUTINE
	
NO_DIGIT_TO_DISPLAY:;---CLEAR ALL LED
	MOV DX, PCS2_ADDR
	;MOV AL, 11111111B
	MOV AL, 00000000B
	OUT DX, AL
	
	MOV DX, PCS3_ADDR
	MOV AL, 01000000B
	;MOV AL, 11111111B
	OUT DX, AL
	


END_LED_ROUTINE:

	POP DX
	POP CX
	POP BX
	POP AX
	RET
LED_ROUTINE ENDP
;-------------------------------------------------------------------------

PUSH_TO_LED_Q PROC FAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	MOV AL, DS:LED_COUNT
	CMP DS:LED_MAX_COUNT, AL
	JE LED_Q_FULL
	
	INC DS:LED_COUNT
	MOV AL, DS:LED_DISPLAY_Q[4]
	MOV DS:LED_DISPLAY_Q[5], AL
	MOV AL, DS:LED_DISPLAY_Q[3]
	MOV DS:LED_DISPLAY_Q[4], AL
	MOV AL, DS:LED_DISPLAY_Q[2]
	MOV DS:LED_DISPLAY_Q[3], AL
	MOV AL, DS:LED_DISPLAY_Q[1]
	MOV DS:LED_DISPLAY_Q[2], AL
	MOV AL, DS:LED_DISPLAY_Q[0]
	MOV DS:LED_DISPLAY_Q[1], AL
	
	MOV BL, DS:KEYPAD_INPUT
	XOR BH, BH
	MOV AL, DS:KEY_DECODE[BX]
	MOV DS:LED_DISPLAY_Q[0], AL
	
LED_Q_FULL:

	POP DX
	POP CX
	POP BX
	POP AX
	RET
 PUSH_TO_LED_Q ENDP
 
 PUSH_TO_LED_Q_PRICE PROC FAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	MOV AL, DS:LED_COUNT
	CMP DS:LED_MAX_COUNT, AL
	JE LED_Q_FULL_PRICE
	
	INC DS:LED_COUNT
	MOV AL, DS:LED_DISPLAY_Q[4]
	MOV DS:LED_DISPLAY_Q[5], AL
	MOV AL, DS:LED_DISPLAY_Q[3]
	MOV DS:LED_DISPLAY_Q[4], AL
	MOV AL, DS:LED_DISPLAY_Q[2]
	MOV DS:LED_DISPLAY_Q[3], AL
	MOV AL, DS:LED_DISPLAY_Q[1]
	MOV DS:LED_DISPLAY_Q[2], AL
	MOV AL, DS:LED_DISPLAY_Q[0]
	MOV DS:LED_DISPLAY_Q[1], AL
	
	MOV AL, DS:PRICE_DIGIT
	MOV DS:LED_DISPLAY_Q[0], AL
	
LED_Q_FULL_PRICE:

	POP DX
	POP CX
	POP BX
	POP AX
	RET
 PUSH_TO_LED_Q_PRICE ENDP
 
POP_FROM_LED_Q PROC FAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	CMP DS:LED_COUNT, 0H
	JE LED_Q_EMPTY
	
	DEC DS:LED_COUNT
	MOV AL, DS:LED_DISPLAY_Q[1]
	MOV DS:LED_DISPLAY_Q[0], AL
	MOV AL, DS:LED_DISPLAY_Q[2]
	MOV DS:LED_DISPLAY_Q[1], AL
	MOV AL, DS:LED_DISPLAY_Q[3]
	MOV DS:LED_DISPLAY_Q[2], AL
	MOV AL, DS:LED_DISPLAY_Q[4]
	MOV DS:LED_DISPLAY_Q[3], AL
	MOV AL, DS:LED_DISPLAY_Q[5]
	MOV DS:LED_DISPLAY_Q[4], AL
	MOV DS:LED_DISPLAY_Q[5], 0H
	
LED_Q_EMPTY:

	
	POP DX
	POP CX
	POP BX
	POP AX
	RET
POP_FROM_LED_Q ENDP

POP_FROM_LED_Q_AISH PROC FAR
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	
	
	
	MOV CX, 10H
	POP_FROM_LED_Q_AISH_LOOP:
	DEC DS:LED_COUNT
		MOV AL, DS:LED_DISPLAY_Q[1]
		MOV DS:LED_DISPLAY_Q[0], AL
		MOV AL, DS:LED_DISPLAY_Q[2]
		MOV DS:LED_DISPLAY_Q[1], AL
		MOV AL, DS:LED_DISPLAY_Q[3]
		MOV DS:LED_DISPLAY_Q[2], AL
		MOV AL, DS:LED_DISPLAY_Q[4]
		MOV DS:LED_DISPLAY_Q[3], AL
		MOV AL, DS:LED_DISPLAY_Q[5]
		MOV DS:LED_DISPLAY_Q[4], AL
		MOV DS:LED_DISPLAY_Q[5], 0H
	LOOP POP_FROM_LED_Q_AISH_LOOP
	
	MOV DS:LED_COUNT, 0H
	
LED_Q_EMPTY_AISH:

	
	POP DX
	POP CX
	POP BX
	POP AX
	RET
POP_FROM_LED_Q_AISH ENDP

;Sound code starts here
PUT_ONE_SOUND PROC FAR
	PUSH DS
	PUSH BX
	PUSH CX
	PUSH AX
	; insert which sound here in my_sound_index
	; MOV AX,5
	; MOV DS:CURRENT_SOUND,AX
	 MOV AX,DS:CURRENT_SOUND
	 MOV DS:my_sound_index, AX
		

	CMP AX,3
	JE threes	
	cmp AX, 8
	JE eight
	cmp AX, 6
	JE sixs
	cmp AX, 9
	JE nine
	cmp AX, 7
	JE Seven
	
	jmp normal_fetch
	threes:
	jmp three
	sixs:
	jmp six
	
	normal_fetch:
	 ;set head
		XOR AX,AX
		 XOR BX, BX
		 XOR CX,CX
		 MOV BX,offset my_sound_word_start
		 MOV AX,DS:my_sound_index
		 ADD DS:my_sound_index , AX
		 ADD BX,DS:my_sound_index
		 MOV AX ,[BX]
		MOV WORD PTR DS:SOUND_QUEUE_HEAD ,AX
	
	;set tail
		 XOR AX,AX
		 XOR BX, BX
		 XOR CX,CX
	
		 MOV BX,offset my_sound_word_size
		 MOV AX,DS:my_sound_index
		 ADD DS:my_sound_index , AX
		 ADD BX,DS:my_sound_index
		 MOV AX, [BX]
		 MOV WORD PTR DS:SOUND_SIZE , AX
		 MOV AX , DS:SOUND_SIZE
		ADD AX, DS:SOUND_QUEUE_HEAD
		 MOV word ptr DS:SOUND_QUEUE_TAIL , AX
		 
		 JMP endd
	seven :	 

		MOV WORD PTR DS:SOUND_QUEUE_HEAD ,6609h
		MOV AX,0f35h
		ADD AX, DS:SOUND_QUEUE_HEAD
		 MOV word ptr DS:SOUND_QUEUE_TAIL , AX
	jmp endd
	
	eight:
		MOV WORD PTR DS:SOUND_QUEUE_HEAD ,753eh
		MOV AX,0703h
		ADD AX, DS:SOUND_QUEUE_HEAD
		 MOV word ptr DS:SOUND_QUEUE_TAIL , AX
	jmp endd
	
	nine:
		MOV WORD PTR DS:SOUND_QUEUE_HEAD ,7c41h
		MOV AX,10cAh
		ADD AX, DS:SOUND_QUEUE_HEAD
		 MOV word ptr DS:SOUND_QUEUE_TAIL , AX
	jmp endd
	
	six:
		MOV WORD PTR DS:SOUND_QUEUE_HEAD ,21615
		MOV AX,4506
		ADD AX, DS:SOUND_QUEUE_HEAD
		 MOV word ptr DS:SOUND_QUEUE_TAIL , AX
	jmp endd

	three:	 
		MOV WORD PTR DS:SOUND_QUEUE_HEAD ,2ea9h	
		MOV AX,0d2ah
		ADD AX, DS:SOUND_QUEUE_HEAD
		 MOV word ptr DS:SOUND_QUEUE_TAIL , AX	
	endd:
	POP AX
	POP CX
	POP BX
	POP DS
	RET
PUT_ONE_SOUND ENDP

CODE_SEG	ENDS
END
